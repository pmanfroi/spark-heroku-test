name: Deploy to EC2
on:
  push:
    branches:
      - dev
jobs:
  push_image:
    name: Push to GHCR
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checking out the repository
        uses: actions/checkout@v3
      - name: Set up Docker Builder
        uses: docker/setup-buildx-action@v3
      - name: Logging into GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Push Backend Image to Github Container Registry
        run: |
          docker build -t ghcr.io/sentosatech/spark:backend-staging ./backend
          docker push ghcr.io/sentosatech/spark:backend-staging
      - name: Generate web-client .env file
        run: |
          touch ./web-client/.env
          WEB_ENV_FILE=./web-client/.env
          echo "VITE_APP_BACKEND_PORT=${{ secrets.VITE_APP_BACKEND_PORT }}" >> "$WEB_ENV_FILE"
          echo "VITE_APP_BACKEND_HOST=${{ secrets.VITE_APP_BACKEND_HOST }}" >> "$WEB_ENV_FILE"
      - name: Build and Push Frontend Image to Github Container Registry
        run: |
          docker build -t ghcr.io/sentosatech/spark:client-staging ./web-client
          docker push ghcr.io/sentosatech/spark:client-staging
      - name: Delete web-client .env file
        run: |
          rm ./web-client/.env
  deploy_to_ec2:
    needs: push_image
    name: Deploy to EC2
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    env:
      AWS_INSTANCE_SG_ID: ${{ secrets.AWS_INSTANCE_SG_ID }} # EC2 Instance > Networking > Security Groups > sg-[id]
    steps:
      - name: Checking out the repository
        uses: actions/checkout@v3
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # IAM > Users > User > Access key
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # IAM > Users > User > Access key (show only during creation)
          aws-region: ${{ secrets.AWS_REGION }} # EC2 Instance region
      - name: get runner ip address
        id: ip
        uses: haythem/public-ip@v1.3
      - name: whitelist runner ip address
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id $AWS_INSTANCE_SG_ID \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32
      - name: Set permissions for private key # .pem file is generated during EC2 instance creation
        run: |
          echo "${{ secrets.AWS_PRIVATE_KEY }}" > key.pem 
          chmod 600 key.pem
      - name: Enable docker swarm
        run: |
          docker swarm init
      - name: Copy Docker Compose File
        run: |
          scp -i key.pem -o StrictHostKeyChecking=no ./dev/docker-compose-staging.yml ec2-user@ec2-3-144-222-101.us-east-2.compute.amazonaws.com:/home/ec2-user/docker-compose.yml
      - name: Logging into GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GH_ACTOR }}
          password: ${{ secrets.GH_PAT }}
      - name: Login EC2 to Docker
        run: |
          ssh -i key.pem -o StrictHostKeyChecking=no ec2-user@ec2-3-144-222-101.us-east-2.compute.amazonaws.com "docker login ghcr.io --username ${{ secrets.GH_ACTOR }} --password ${{ secrets.GH_PAT }}"
      - name: Pull client image
        run: |
          docker pull ghcr.io/sentosatech/spark:client-staging
      - name: Pull backend image
        run: |
          docker pull ghcr.io/sentosatech/spark:backend-staging
      - name: Build docker-compose
        run: |
          docker-compose -f docker-compose.yml build
      - name: Run docker-compose
        run: |
          docker-compose -f docker-compose.yml up -d
      - name: revoke runner ip address
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id $AWS_INSTANCE_SG_ID \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32
